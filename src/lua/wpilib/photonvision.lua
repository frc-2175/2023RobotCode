-- Automatically generated by gen_bindings.lua. DO NOT EDIT.

local ffi = require("ffi")
require("wpilib.bindings.asserts")
require("wpilib.bindings.enum")

---@class PhotonCamera
---@field _this PhotonCamera
PhotonCamera = {}

---@class PhotonPipelineResult
---@field _this PhotonPipelineResult
PhotonPipelineResult = {}

---@class PhotonTrackedTarget
---@field _this PhotonTrackedTarget
PhotonTrackedTarget = {}

---@class PhotonPoseEstimator
---@field _this PhotonPoseEstimator
PhotonPoseEstimator = {}

---@param cameraName string
---@return PhotonCamera
function PhotonCamera:new(cameraName)
    local instance = {
        _this = ffi.C.PhotonCamera_new(cameraName),
    }
    setmetatable(instance, self)
    self.__index = self
    return instance
end

---@param driverMode boolean
function PhotonCamera:setDriverMode(driverMode)
    ffi.C.PhotonCamera_SetDriverMode(self._this, driverMode)
end

---@return boolean
function PhotonCamera:getDriverMode()
    return ffi.C.PhotonCamera_GetDriverMode(self._this)
end

function PhotonCamera:takeInputSnapshot()
    ffi.C.PhotonCamera_TakeInputSnapshot(self._this)
end

function PhotonCamera:takeOutputSnapshot()
    ffi.C.PhotonCamera_TakeOutputSnapshot(self._this)
end

---@param index integer
function PhotonCamera:setPipelineIndex(index)
    index = AssertInt(index)
    ffi.C.PhotonCamera_SetPipelineIndex(self._this, index)
end

---@return integer
function PhotonCamera:getPipelineIndex()
    return ffi.C.PhotonCamera_GetPipelineIndex(self._this)
end

---@return boolean
function PhotonPipelineResult:hasTargets()
    return ffi.C.PhotonPipelineResult_HasTargets(self._this)
end

---@return number
function PhotonTrackedTarget:getYaw()
    return ffi.C.PhotonTrackedTarget_GetYaw(self._this)
end

---@return number
function PhotonTrackedTarget:getPitch()
    return ffi.C.PhotonTrackedTarget_GetPitch(self._this)
end

---@return number
function PhotonTrackedTarget:getArea()
    return ffi.C.PhotonTrackedTarget_GetArea(self._this)
end

---@return number
function PhotonTrackedTarget:getSkew()
    return ffi.C.PhotonTrackedTarget_GetSkew(self._this)
end

---@return integer
function PhotonTrackedTarget:getFiducialId()
    return ffi.C.PhotonTrackedTarget_GetFiducialId(self._this)
end

---@return number
function PhotonTrackedTarget:getPoseAmbiguity()
    return ffi.C.PhotonTrackedTarget_GetPoseAmbiguity(self._this)
end

---@class PoseStrategy
---@field LOWEST_AMBIGUITY integer
---@field CLOSEST_TO_CAMERA_HEIGHT integer
---@field CLOSEST_TO_REFERENCE_POSE integer
---@field CLOSEST_TO_LAST_POSE integer
---@field AVERAGE_BEST_TARGETS integer
---@field MULTI_TAG_PNP integer
PoseStrategy = BindingEnum:new('PoseStrategy', {
    LOWEST_AMBIGUITY = 0,
    CLOSEST_TO_CAMERA_HEIGHT = 1,
    CLOSEST_TO_REFERENCE_POSE = 2,
    CLOSEST_TO_LAST_POSE = 3,
    AVERAGE_BEST_TARGETS = 4,
    MULTI_TAG_PNP = 5,
})

---@class AprilTagField
---@field k2022RapidReact integer
---@field k2023ChargedUp integer
AprilTagField = BindingEnum:new('AprilTagField', {
    k2022RapidReact = 0,
    k2023ChargedUp = 1,
})

---@return integer
function PhotonPoseEstimator:getPoseStrategy()
    return ffi.C.PhotonPoseEstimator_GetPoseStrategy(self._this)
end

---@param poseStrategy integer
function PhotonPoseEstimator:setPoseStrategy(poseStrategy)
    poseStrategy = AssertEnumValue(PoseStrategy, poseStrategy)
    poseStrategy = AssertInt(poseStrategy)
    ffi.C.PhotonPoseEstimator_SetPoseStrategy(self._this, poseStrategy)
end
